{"version":3,"sources":["../../../../../Projects/Webpack/posts-dev-structure/src/localStorage.js","../../../../../Projects/Webpack/posts-dev-structure/src/Posts.js","../../../../../Projects/Webpack/posts-dev-structure/src/Form.js","../../../../../Projects/Webpack/posts-dev-structure/src/App.js","../../../../../Projects/Webpack/posts-dev-structure/src/serviceWorker.js","../../../../../Projects/Webpack/posts-dev-structure/src/index.js"],"names":["localStorage","getItem","setItem","JSON","stringify","postsData","localPostsKey","Posts","_this","this","react_default","a","createElement","id","className","props","app","state","posts","length","map","post","key","title","body","tags","tag","onClick","handleRemove","Component","Form","onSubmit","handleSubmit","type","name","placeholder","onChange","handleChange","value","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","localKey","parse","bind","assertThisInitialized","src_Posts","src_Form","e","target","setState","split","preventDefault","maxId","getPostsMaxId","clearTitle","trim","clearBody","clearTags","elem","filter","i","arr","indexOf","newPost","concat","clearId","parseInt","substr","forEach","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2e6d6e9.chunk.js","sourcesContent":["import postsData from './json/posts';\n\nconst localPostsKey = \"app-posts\";\n\nif (localStorage.getItem(localPostsKey) === null) {\n  localStorage.setItem(localPostsKey, JSON.stringify(postsData));\n}\n\nexport default localPostsKey;","import React, { Component } from 'react';\n\nclass Posts extends Component {\n  render() {\n    return (\n      <div id=\"posts\" className={this.props.app.state.posts.length ? \"well\" : \"empty-posts-area\"}>\n        {this.props.app.state.posts.map(post => (\n\n          <article key={post.id}>\n            <header>\n              <h3>{post.title}</h3>\n            </header>\n            <section>\n              <p>{post.body}</p>\n            </section>\n            <footer>\n              <div className=\"tags\">\n                {post.tags.map(tag => (\n                  <button key={tag} className=\"btn btn-xs btn-default\">{tag}</button>\n                ))}\n              </div>\n            </footer>\n            <div className=\"controls\">\n              <button\n                id={\"post-button-\" + post.id}\n                className=\"btn btn-danger btn-mini\"\n                onClick={this.props.app.handleRemove}>\n                  удалить\n              </button>\n            </div>\n          </article>\n        \n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Posts;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  render() {\n    return (\n      <form id=\"post-add\" className=\"col-lg-4\" onSubmit={this.props.app.handleSubmit}>\n        <div className=\"form-group\">\n          <input \n            type=\"text\"\n            className=\"form-control\"\n            name=\"title\"\n            placeholder=\"заголовок\"\n            onChange={this.props.app.handleChange}\n            value={this.props.app.state.title}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input \n            type=\"text\"\n            className=\"form-control\"\n            name=\"body\"\n            placeholder=\"запись\"\n            onChange={this.props.app.handleChange}\n            value={this.props.app.state.body}\n          />\n        </div>\n        <div className=\"form-group\">\n          <input \n            type=\"text\"\n            className=\"form-control\"\n            name=\"tags\"\n            placeholder=\"тег, еще тег\"\n            onChange={this.props.app.handleChange}\n            value={this.props.app.state.tags}\n          />\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Добавить</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Posts from './Posts';\nimport Form from './Form';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    if (localStorage.getItem(this.props.localKey) === null) {\n      localStorage.setItem(this.props.localKey, JSON.stringify([]));\n    }\n    this.state = { posts: JSON.parse(localStorage.getItem(this.props.localKey)), title: '', body: '', tags: [] };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header id=\"header\">\n          <div className=\"page-header\">\n            <h1>Коллекция постов</h1>\n          </div>\n        </header>\n        <section>\n          <Posts app={this} />\n          <Form app={this} />\n        </section>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    switch (e.target.name) {\n      case 'title':\n        this.setState({ title: e.target.value });\n        break;\n      case 'body':\n        this.setState({ body: e.target.value });\n        break;\n      case 'tags':\n        this.setState({ tags: e.target.value.split(',') });\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const maxId = this.getPostsMaxId();\n    const clearTitle = this.state.title.trim();\n    const clearBody = this.state.body.trim();\n    const clearTags = this.state.tags.map(elem => elem.trim()).filter((elem,i,arr) => (elem && arr.indexOf(elem) === i));\n    if (!clearTitle.length || !clearBody.length || !clearTags.length) {\n      return;\n    }\n    const newPost = {\n      id: maxId,\n      title: clearTitle,\n      body: clearBody,\n      tags: clearTags\n    };\n    this.setState(state => ({\n      posts: state.posts.concat(newPost),\n      title: '',\n      body: '',\n      tags: []\n    }), function() {\n      localStorage.setItem(this.props.localKey, JSON.stringify(this.state.posts));\n    });\n  }\n\n  handleRemove(e) {\n    const clearId = parseInt(e.target.id.substr(\"button-post-\".length));\n    this.setState(state => ({\n      posts: state.posts.filter(elem => (parseInt(elem.id) !== clearId)),\n      title: '',\n      body: '',\n      tags: []\n    }), function() {\n      localStorage.setItem(this.props.localKey, JSON.stringify(this.state.posts));\n    });\n  }\n\n  getPostsMaxId() {\n    let maxId = 1;\n    this.state.posts.forEach((elem) => {if(elem.id >= maxId) maxId = +elem.id + 1;});\n    return maxId;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/posts.css';\nimport './css/adjustment.css';\nimport localPostsKey from './localStorage';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App localKey={localPostsKey}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}